#include "opencv2/opencv.hpp"
#include "opencv2/highgui.hpp"
#include "opencv2/core.hpp"


using namespace cv;
using namespace std;
int main(int argc, char* argv[]) {

	Mat image = imread(argv[1], IMREAD_GRAYSCALE);

	if (!image.data) {
		cout << "Could not find thye image " << endl;
		return -1;
	}

	Mat smooth = image.clone();

	int k[5][5] = { {2, 4, 5, 4 , 2},
	{4, 9, 12, 9, 4},
	{5, 12, 15, 12, 5},
	{4, 9, 12, 9, 4 },
	{2, 4, 5, 4 , 2 } };

	double val;

	//gaussian smoothing
	for (int i = 2; i < image.rows - 2; i++) {
		for (int j = 2; j < image.cols - 2; j++) {

			val = 0.0;

			for (int m = -2; m <= 2; m++) {
				for (int n = -2; n <= 2; n++) {
					val = val + double(k[m + 2][n + 2] * image.at<uchar>(i + m, j + n)) / 159;
				}
			}
			smooth.at<uchar>(i, j) = cvRound(val);
		}
	}

	Mat difference = smooth.clone();

	int Gx, Gy, g;
	//difference operator
	for (int x = 0; x < smooth.rows - 1; x++) {
		for (int y = 0; y < smooth.cols - 1; y++) {

			Gx = 1 * smooth.at<uchar>(x, y) - 1 * smooth.at<uchar>(x, y + 1);
			Gy = 1 * smooth.at<uchar>(x, y) - 1 * smooth.at<uchar>(x + 1, y);

			g = abs(Gx) + abs(Gy);

			if (g > 15)
				difference.at<uchar>(x, y) = 255;
			else
				difference.at<uchar>(x, y) = 0;
		}
	}

	namedWindow("Image");
	imshow("Image", image);

	namedWindow("Gaussian smooth");
	imshow("Gaussian smooth", smooth);

	namedWindow("Difference operator");
	imshow("Difference operator", difference);


	waitKey(0);
	return 0;
}
